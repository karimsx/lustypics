// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --------------------------------------

model User {
  id             Int      @id @default(autoincrement())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  email          String   @unique
  hashedPassword String?
  role           String   @default("USER")

  emailConfirmed Boolean @default(false)

  likedTags Tags[] @relation(name: "UserTags")

  name           String?
  birthday      DateTime?
  bio           String?
  country       String?
  gender        String?
  tokens   Token[]
  sessions Session[]
  files    File[]
  Gallery  Gallery[]
}


model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?

  user   User? @relation(fields: [userId], references: [id])
  userId Int?
}

model Token {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  hashedToken String
  type        String
  // See note below about TokenType enum
  // type        TokenType
  expiresAt   DateTime
  sentTo      String


  user   User @relation(fields: [userId], references: [id])
  userId Int

  @@unique([hashedToken, type])
}

model File {
  id        Int       @id @default(autoincrement())
  name      String
  mimetype  String?
  key       String
  keyPdf    String?
  owner     User      @relation(fields: [ownerId], references: [id])
  ownerId   Int
  gallery   Gallery?  @relation(fields: [galleryId], references: [id])
  galleryId Int?
  galleryIndex Int?
  tag Tags?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Tags {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  galleries   Gallery[]
  file   File?  @relation(fields: [fileId], references: [id])
  fileId Int? @unique
    userTag User[] @relation(name: "UserTags")

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
}

model Gallery {
  id          Int       @id @default(autoincrement())
  name        String?
  description String?
  owner       User      @relation(fields: [ownerId], references: [id])
  ownerId     Int
  files       File[]
  tags        Tags[]
  isPrivate   Boolean   @default(false)
  views       Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
}

// NOTE: It's highly recommended to use an enum for the token type
//       but enums only work in Postgres.
//       See: https://blitzjs.com/docs/database-overview#switch-to-postgre-sql
// enum TokenType {
//   RESET_PASSWORD
// }
